package com.waldirbaia.agent

import java.io.File
import java.io.FileOutputStream

object ConfigSetup {
    private const val CONFIG_FILE = "config.properties"

    /**
     * Verifica se o arquivo de configura√ß√£o existe.
     * Se n√£o existir, inicia o processo interativo de configura√ß√£o.
     */
    fun ensureConfigExists(): Boolean {
        val configFile = File(CONFIG_FILE)

        return if (!configFile.exists()) {
            println("Arquivo 'config.properties' n√£o encontrado.")
            println("Iniciando assistente de configura√ß√£o inicial...\n")
            createConfigInteractively(configFile)
        } else {
            println("‚úÖ Arquivo de configura√ß√£o '$CONFIG_FILE' encontrado.")
            true
        }
    }

    /**
     * Cria o arquivo de configura√ß√£o de forma interativa.
     */
    private fun createConfigInteractively(configFile: File): Boolean {
        try {
            val configs = mutableMapOf<String, String>()

            println("--- Configura√ß√£o Inicial do Agente ---")
            println("Por favor, forne√ßa as seguintes informa√ß√µes.\n")

            // 1. Client ID
            print("‚û§ [1/7] ID do Cliente: ")
            configs["client_id"] = readLine()?.trim()?.takeIf { it.isNotEmpty() }
                ?: "CLIENTE_${System.currentTimeMillis()}"

            // 2. Nome da Empresa
            print("‚û§ [2/7] Nome da Empresa: ")
            configs["nome_empresa"] = readLine()?.trim()?.takeIf { it.isNotEmpty() }
                ?: "Empresa N√£o Informada"

            // 3. CNPJ
            print("‚û§ [3/7] CNPJ (apenas n√∫meros, Padr√£o: 000...): ")
            configs["cnpj_empresa"] = readLine()?.trim()?.replace(Regex("[^0-9]"), "")
                ?.takeIf { it.isNotEmpty() } ?: "00000000000000"

            // 4. Supabase URL
            println("\nüîó Insira a URL da sua inst√¢ncia Supabase")
            configs["supabase_url"] = promptForRequiredField("URL do Supabase")

            // 5. Supabase Key
            println("\nüîë Insira a Chave P√∫blica (anon key) do seu projeto Supabase")
            configs["supabase_key"] = promptForRequiredField("Supabase Key")

            // 6. Backup Folder Path (Local)
            println("\nüìÅ Insira o caminho completo da pasta de backups LOCAL")
            println("   Exemplo: C:/Backups ou C:/Waldir/Backups")
            val localPath = promptForRequiredField("Pasta de Backups Local")
            // Normalizar o caminho (trocar \ por /)
            configs["backup_folder_path"] = localPath.replace("\\", "/")

            // Valida e cria a pasta de backup, se necess√°rio
            validateAndCreateBackupDir(configs["backup_folder_path"]!!)

            // 7. Backup Folder Path Remote (Nuvem)
            println("\n‚òÅÔ∏è  Insira o caminho completo da pasta de backups na NUVEM")
            println("   Exemplo: dropbox:/BACKUP/AGROFERTIL")
            println("   Formato: <remote>:/<caminho>")
            val remotePath = promptForRequiredField("Pasta de Backups Remota")
            // Normalizar o caminho (trocar \ por /)
            configs["backup_folder_path_remote"] = remotePath.replace("\\", "/")

            // Confirma√ß√£o das configura√ß√µes
            println("\n--- Resumo das Configura√ß√µes ---")
            println("Client ID:         ${configs["client_id"]}")
            println("Nome Empresa:      ${configs["nome_empresa"]}")
            println("CNPJ:              ${configs["cnpj_empresa"]}")
            println("Supabase URL:      ${configs["supabase_url"]}")
            println("Supabase Key:      ${configs["supabase_key"]?.take(20)}...")
            println("Pasta Local:       ${configs["backup_folder_path"]}")
            println("Pasta Remota:      ${configs["backup_folder_path_remote"]}")
            println("--------------------------------")

            print("As configura√ß√µes est√£o corretas? (S/n): ")
            val confirm = readLine()?.trim()?.uppercase() ?: "S"

            if (confirm != "S" && confirm.isNotEmpty()) {
                println("‚ùå Configura√ß√£o cancelada pelo usu√°rio.")
                return false
            }

            // Salva o arquivo
            saveConfigFile(configFile, configs)

            println("\n‚úÖ Arquivo 'config.properties' criado com sucesso em: ${configFile.absolutePath}")
            println("üöÄ Iniciando o sistema...\n")
            return true

        } catch (e: Exception) {
            println("\n‚ùå Erro ao criar o arquivo de configura√ß√£o: ${e.message}")
            return false
        }
    }

    /**
     * Valida se a pasta de backup existe e oferece a op√ß√£o de cri√°-la.
     */
    private fun validateAndCreateBackupDir(path: String) {
        val backupDir = File(path)
        if (!backupDir.exists()) {
            println("\nA pasta '$path' n√£o existe.")
            print("Deseja cri√°-la agora? (S/n): ")
            val createFolder = readLine()?.trim()?.uppercase() ?: "S"

            if (createFolder == "S" || createFolder.isEmpty()) {
                try {
                    backupDir.mkdirs()
                    println("‚úÖ Pasta criada com sucesso!")
                } catch (e: Exception) {
                    println("‚ùå Erro ao criar a pasta: ${e.message}")
                    println("‚ö†Ô∏è Voc√™ precisar√° criar a pasta manualmente.")
                }
            }
        } else {
            println("‚úÖ Pasta de backups encontrada.")
        }
    }

    /**
     * Solicita um campo obrigat√≥rio at√© que o usu√°rio forne√ßa um valor.
     */
    private fun promptForRequiredField(fieldName: String): String {
        var value: String?
        do {
            print("‚û§ $fieldName: ")
            value = readLine()?.trim()
            if (value.isNullOrEmpty()) {
                println("   ‚ö†Ô∏è  Este campo √© obrigat√≥rio. Tente novamente.")
            }
        } while (value.isNullOrEmpty())
        return value
    }

    /**
     * Salva as configura√ß√µes em um arquivo .properties.
     */
    private fun saveConfigFile(file: File, configs: Map<String, String>) {
        val content = """
        # Configura√ß√£o do Agente de Backup
        # Gerado em: ${java.time.LocalDateTime.now()}

        # ID √∫nico para este cliente. O agente s√≥ ouvir√° mudan√ßas com este ID.
        client_id=${configs["client_id"]}

        # Nome da empresa
        nome_empresa=${configs["nome_empresa"]}

        # CNPJ da empresa (apenas n√∫meros)
        cnpj_empresa=${configs["cnpj_empresa"]}

        # URL da inst√¢ncia Supabase
        supabase_url=${configs["supabase_url"]}

        # Chave de API do Supabase (anon key)
        supabase_key=${configs["supabase_key"]}

        # Caminho da pasta onde os backups s√£o salvos (LOCAL)
        backup_folder_path=${configs["backup_folder_path"]}

        # Caminho da pasta onde os backups est√£o na nuvem (REMOTO)
        # Formato: <remote>:/<caminho> - Exemplo: dropbox:/BACKUP/AGROFERTIL
        backup_folder_path_remote=${configs["backup_folder_path_remote"]}
        """.trimIndent()

        FileOutputStream(file).use { it.write(content.toByteArray()) }
    }
}